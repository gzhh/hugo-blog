<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on gzhh&#39;s blog</title>
    <link>http://localhost:1313/tags/mysql/</link>
    <description>Recent content in MySQL on gzhh&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Nov 2023 16:10:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang time.Time 和 MySQL datetime 互转问题</title>
      <link>http://localhost:1313/posts/go-and-mysql-time/</link>
      <pubDate>Sun, 05 Nov 2023 16:10:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/go-and-mysql-time/</guid>
      <description>一、时间概念 时间标准 某个时间系统的时间标准又称时间基准，是定义如何测量时间的一种规范，具体包括测量时间间隔的尺度基准和定义起始时刻的参考基准。&#xA;UTC&#xA;https://en.wikipedia.org/wiki/Coordinated_Universal_Time 标准时间 标准时间是在同一时区内的不同地区，舍弃地区性的子午线定出的太阳时或地方平时，而共同采用的同步时间。&#xA;Time Zone&#xA;https://en.wikipedia.org/wiki/Time_zone https://en.wikipedia.org/wiki/Tz_database https://en.wikipedia.org/wiki/List_of_tz_database_time_zones 国际标准 ISO 8610 国际标准化组织的日期和时间的表示方法。&#xA;Date&#xA;2023-11-05 Time in UTC&#xA;06:50:41Z T065041Z Date and time in UTC&#xA;2023-11-05T06:50:41Z 20231105T065041Z Date and time with the offset&#xA;2023-11-04T23:50:41−07:00 UTC−07:00 2023-11-05T06:50:41+00:00 UTC+00:00 2023-11-05T13:50:41+07:00 UTC+07:00 Ref:&#xA;The T is just a literal to separate the date from the time, and the Z means &amp;ldquo;zero hour offset&amp;rdquo; also known as &amp;ldquo;Zulu time&amp;rdquo; (UTC). UTC GMT Time in China - CST Time in the United States 二、Time in Linux 查看所在时区的日期和时间</description>
    </item>
    <item>
      <title>MySQL 锁</title>
      <link>http://localhost:1313/posts/know_mysql_lock/</link>
      <pubDate>Sun, 23 Feb 2020 09:43:53 +0800</pubDate>
      <guid>http://localhost:1313/posts/know_mysql_lock/</guid>
      <description>锁介绍 假设我们有一个商品表 item，里面有两个字段 id 和 store&#xA;+----+-------+ | id | store | +----+-------+ | 1 | 1 | +----+-------+ 一般我们在生成订单之前会先确定 store 商品库存是否大于你要购买的数量，然后更新库存&#xA;-- 查询 SELECT store FROM item WHERE id = 1; -- 更新 UPDATE item SET store = store - 1 WHERE id = 1; 但是这样在用户大量并发操作的时候会是不安全的，比如第一个用户 SELECT 到的 store 是 1，但是当他准备 UPDATE 的时候，可能已经有人把库存 store 扣成了 0，那么第一个用户再去 UPDATE 的时候，就可能出现负库存的情况，因此我们必须通过事务和锁机制来确保读取及提交的数据都是正确的。&#xA;在 MySQL 终端我们可以这样测试&#xA;SET AUTOCOMMIT=0; BEGIN; SELECT store FROM item WHERE id=1 FOR UPDATE; 此时 item 表中 id=1 的这行数据被锁住（InnoDB 的 Row Lock 或 Table Lock）其他事务必须等待此次事务提交后才能执行； SELECT store FROM item WHERE id=1 FOR UPDATE; 可以确保库存 store 在别的事务读取到的数字是正确的； 然后我们修改库存，提交数据写入数据库，item 表中 id=1 的这行数据解锁。</description>
    </item>
  </channel>
</rss>
