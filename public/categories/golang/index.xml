<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on gzhh&#39;s blog</title>
    <link>http://localhost:1313/categories/golang/</link>
    <description>Recent content in Golang on gzhh&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Nov 2023 16:10:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang time.Time 和 MySQL datetime 互转问题</title>
      <link>http://localhost:1313/posts/go-and-mysql-time/</link>
      <pubDate>Sun, 05 Nov 2023 16:10:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/go-and-mysql-time/</guid>
      <description>一、时间概念 时间标准 某个时间系统的时间标准又称时间基准，是定义如何测量时间的一种规范，具体包括测量时间间隔的尺度基准和定义起始时刻的参考基准。&#xA;UTC&#xA;https://en.wikipedia.org/wiki/Coordinated_Universal_Time 标准时间 标准时间是在同一时区内的不同地区，舍弃地区性的子午线定出的太阳时或地方平时，而共同采用的同步时间。&#xA;Time Zone&#xA;https://en.wikipedia.org/wiki/Time_zone https://en.wikipedia.org/wiki/Tz_database https://en.wikipedia.org/wiki/List_of_tz_database_time_zones 国际标准 ISO 8610 国际标准化组织的日期和时间的表示方法。&#xA;Date&#xA;2023-11-05 Time in UTC&#xA;06:50:41Z T065041Z Date and time in UTC&#xA;2023-11-05T06:50:41Z 20231105T065041Z Date and time with the offset&#xA;2023-11-04T23:50:41−07:00 UTC−07:00 2023-11-05T06:50:41+00:00 UTC+00:00 2023-11-05T13:50:41+07:00 UTC+07:00 Ref:&#xA;The T is just a literal to separate the date from the time, and the Z means &amp;ldquo;zero hour offset&amp;rdquo; also known as &amp;ldquo;Zulu time&amp;rdquo; (UTC). UTC GMT Time in China - CST Time in the United States 二、Time in Linux 查看所在时区的日期和时间</description>
    </item>
    <item>
      <title>Golang json unmarshal 大整数丢失精度问题</title>
      <link>http://localhost:1313/posts/golang-json-unmarshal-long-number/</link>
      <pubDate>Sun, 26 Mar 2023 13:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang-json-unmarshal-long-number/</guid>
      <description>问题介绍 在 Golang 中使用 json Unmarshal 将一个 json 解析为不确定的结构 interface{} 时候，会将数字的接收类型默认设置为 float64。&#xA;当原 json 结构中的整数太长，会导致转为 float64 超出精度，导致精度丢失。&#xA;例子 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) var jsonstring = `{ &amp;#34;id&amp;#34;: 1130839459432311551, &amp;#34;id1&amp;#34;: 113083945943231, &amp;#34;id2&amp;#34;: 12344556, &amp;#34;create_time&amp;#34;: &amp;#34;2023-03-22 16:58:38&amp;#34;, &amp;#34;labels&amp;#34;: [] }` func f1() { var data interface{} err := json.Unmarshal([]byte(jsonstring), &amp;amp;data) if err != nil { panic(err) } fmt.Printf(&amp;#34;%+v\n&amp;#34;, data) dataBytes, err := json.Marshal(data) if err != nil { panic(err) } fmt.</description>
    </item>
    <item>
      <title>理解 Go 函数中的切片传参</title>
      <link>http://localhost:1313/posts/understand-slice-param-in-go-function/</link>
      <pubDate>Fri, 19 Jun 2020 17:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/understand-slice-param-in-go-function/</guid>
      <description></description>
    </item>
  </channel>
</rss>
