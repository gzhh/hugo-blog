<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on gzhh&#39;s blog</title>
    <link>http://localhost:1313/categories/database/</link>
    <description>Recent content in Database on gzhh&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Feb 2020 09:43:53 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 锁</title>
      <link>http://localhost:1313/posts/know_mysql_lock/</link>
      <pubDate>Sun, 23 Feb 2020 09:43:53 +0800</pubDate>
      <guid>http://localhost:1313/posts/know_mysql_lock/</guid>
      <description>锁介绍 假设我们有一个商品表 item，里面有两个字段 id 和 store&#xA;+----+-------+ | id | store | +----+-------+ | 1 | 1 | +----+-------+ 一般我们在生成订单之前会先确定 store 商品库存是否大于你要购买的数量，然后更新库存&#xA;-- 查询 SELECT store FROM item WHERE id = 1; -- 更新 UPDATE item SET store = store - 1 WHERE id = 1; 但是这样在用户大量并发操作的时候会是不安全的，比如第一个用户 SELECT 到的 store 是 1，但是当他准备 UPDATE 的时候，可能已经有人把库存 store 扣成了 0，那么第一个用户再去 UPDATE 的时候，就可能出现负库存的情况，因此我们必须通过事务和锁机制来确保读取及提交的数据都是正确的。&#xA;在 MySQL 终端我们可以这样测试&#xA;SET AUTOCOMMIT=0; BEGIN; SELECT store FROM item WHERE id=1 FOR UPDATE; 此时 item 表中 id=1 的这行数据被锁住（InnoDB 的 Row Lock 或 Table Lock）其他事务必须等待此次事务提交后才能执行； SELECT store FROM item WHERE id=1 FOR UPDATE; 可以确保库存 store 在别的事务读取到的数字是正确的； 然后我们修改库存，提交数据写入数据库，item 表中 id=1 的这行数据解锁。</description>
    </item>
  </channel>
</rss>
