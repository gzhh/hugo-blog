<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on gzhh&#39;s blog</title>
    <link>http://localhost:1313/categories/architecture/</link>
    <description>Recent content in Architecture on gzhh&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Apr 2018 23:24:03 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSO 单点登录</title>
      <link>http://localhost:1313/posts/sso/</link>
      <pubDate>Sun, 01 Apr 2018 23:24:03 +0800</pubDate>
      <guid>http://localhost:1313/posts/sso/</guid>
      <description>说在前面 由于公司要开发几套系统，并且需要几套系统使用统一的用户管理功能，TM让我研究如何实现多系统的单点登录，这周零零碎碎研究了下，所以写下这篇文章，加深下理解，也方便以后回顾。&#xA;介绍 Single sign-on(SSO) 是多个相关但彼此独立的软件系统访问控制的一个属性，也就是用户只使用一个账号和密码来访问多个系统。 单点登录在大型的系统中经常用到，例如：刚开始你的百度搜索 www.baidu.com 和百度云盘都是没有登录的，现在当你登录了百度搜索的系统后，再去刷新一下百度云盘的系统时，这时你会发现百度云盘这边也是显示登录的，这种情况就是使用 SSO 技术实现的。 CAS(Central Authentication Service) 旨在为 Web 应用系统提供一种可靠的单点登录解决方法（属于 Web SSO ）。&#xA;HTTP 知识介绍 由于 HTTP 是无状态的协议，所以我们需要使用某些机制来保存web用户浏览的状态。Cookie 和 Session 都是用来保存web状态的两种技术，区别是 Cookie 是在客户端来保存用户状态，Session 是在服务端来保存用户状态。&#xA;SSO 的几种情况 1.同域下的不同服务 例如我们有两个服务 test.com/site1 test.com/site2 这是最简单的一种情况(不过一般大型系统会用域来区分两个服务)，两个服务共享一个主机地址，且在同一个域下。这种情况下两个业务共享一 个 Cookie 和 Session，所以不用做特别的处理，按照常规的验证方式即可，当你在 site1 上登录了，在 site2 上自然而然也是登录的。&#xA;2.同父域不同子域的服务 例如 site1.x.com site2.x.com 这种情况两个服务的主机是不相同的(父域相同，子域不同)，这种情况我们一般可以设置两个服务的 Cookie 都是在当前域的顶级域下的，也就是 x.com 域下。 cas.x.com 设置一个 CAS(Central Authentication Service)，所有的与登录和验证token和设置 Cookie 的 操作我们都放在 CAS 上面&#xA;3.完全不同域的服务 例如 site1.com site2.com</description>
    </item>
  </channel>
</rss>
